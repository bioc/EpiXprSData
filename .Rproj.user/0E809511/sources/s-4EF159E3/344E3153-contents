library(readxl)
library(edgeR)
library(DESeq2)
library(ggfortify)
library(caret)
library(umap)
library(ggplot2)
library(ggpubr)
library(sva)
library(randomForest)


OAI_crossover <- read_excel("S:/PHS/Files/ilovele1/Bone and Joint/OAI/OAI_miRNA_IDs.xlsx")
OAI_Clinical <- read_excel("S:/PHS/Files/ilovele1/Bone and Joint/OAI/OaiSubjectIds_AmandaAli_mirRNA_Arthrolab20201201.xlsx",  sheet = "Included")
OAI_miRNA <- read.delim("S:/PHS/Files/ilovele1/Bone and Joint/OAI/OAI-300Baselinesamples-maturemiRNAcounts-final.tsv")

rownames(OAI_miRNA) <- OAI_miRNA$miRNA
OAI_miRNA <- OAI_miRNA[,-c(1)]

colnames(OAI_miRNA) <- gsub(".miRNAcount","",colnames(OAI_miRNA))
colnames(OAI_miRNA) <- gsub("Run1_","",colnames(OAI_miRNA))
colnames(OAI_miRNA) <- gsub("Run2_","",colnames(OAI_miRNA))
colnames(OAI_miRNA) <- gsub("Run3_","",colnames(OAI_miRNA))
colnames(OAI_miRNA) <- gsub("Run4_","",colnames(OAI_miRNA))
colnames(OAI_miRNA) <- gsub("Run5_","",colnames(OAI_miRNA))
colnames(OAI_miRNA) <- gsub("Run6_","",colnames(OAI_miRNA))
colnames(OAI_miRNA) <- gsub("Run7_","",colnames(OAI_miRNA))
colnames(OAI_miRNA) <- gsub("Run8_","",colnames(OAI_miRNA))
colnames(OAI_miRNA) <- gsub("Run9_","",colnames(OAI_miRNA))
colnames(OAI_miRNA) <- gsub("Run10_","",colnames(OAI_miRNA))
colnames(OAI_miRNA) <- gsub("Run11_","",colnames(OAI_miRNA))
colnames(OAI_miRNA) <- gsub("Run12_","",colnames(OAI_miRNA))
colnames(OAI_miRNA) <- gsub("R","",colnames(OAI_miRNA))
OAI_crossover$SEQ_ID <- gsub("R","",OAI_crossover$SEQ_ID)

which(!colnames(OAI_miRNA) %in% OAI_crossover$SEQ_ID)
colnames(OAI_miRNA) <- OAI_crossover$ID[match(colnames(OAI_miRNA),OAI_crossover$SEQ_ID)]

OAI_miRNA <- OAI_miRNA[,match(OAI_Clinical$`Subject ID`,colnames(OAI_miRNA))]

OAI_miRNA <- OAI_miRNA[,which(OAI_Clinical$`Prediction Left Knee` != '-' | OAI_Clinical$`Prediction Right Knee` != '-')]
OAI_Clinical <- OAI_Clinical[which(OAI_Clinical$`Prediction Left Knee` != '-' | OAI_Clinical$`Prediction Right Knee` != '-'),]
OAI_Clinical$Progression <- ifelse(OAI_Clinical$`Prediction Left Knee` == 'Prog' | OAI_Clinical$`Prediction Right Knee` == 'Prog',1,0)
OAI_Clinical$Cohort <- OAI_crossover$Cohort[match(colnames(OAI_miRNA),OAI_crossover$ID)]
#####Clinical QC
ggplot(OAI_Clinical, aes(x=Progression,y=, fill=Progression)) +
    geom_boxplot()
chisq.test(OAI_Clinical$Progression, OAI_Clinical$P02RACE)


design <- model.matrix(~OAI_Clinical$Batch )

adjusted <- ComBat_seq(Counts, batch=OAI_Clinical$Cohort,  group=NULL)




###Initial PCA
tmp <- vst(as.matrix(Counts),nsub = 100)
tmp.pca <- prcomp(t(tmp))
OAI_Clinical$BMI_CAT <- ifelse(OAI_Clinical$P01BMI <25,'NORMAL',ifelse(OAI_Clinical$P01BMI >= 25 & OAI_Clinical$P01BMI <30,'OBESE','OVERWEIGHT'))
OAI_Clinical$BMI <- OAI_Clinical$BMI
OAI_Clinical$AGE <- OAI_Clinical$AGE
OAI_Clinical$BMI_CAT <- as.factor(OAI_Clinical$BMI_CAT)
OAI_Clinical$AGE_CAT <- ifelse(OAI_Clinical$V00Age > 50, '>50','<=50')
OAI_Clinical$Batch <- OAI_crossover$Batch[match(OAI_Clinical$`Subject ID`,OAI_crossover$ID)]
OAI_Clinical$Progression <- as.factor(OAI_Clinical$Progression)
pca.plot <- autoplot(tmp.pca, data = OAI_Clinical, label = F)
pca.plot


###Differential Analysis
CPM <- "cpm"(OAI_miRNA)
keep <- which(rowSums(CPM >= 10) >=2)
Counts <- OAI_miRNA[keep,]
design <- model.matrix(~OAI_Clinical_Right$V00Age + OAI_Clinical_Right$P02Sex + OAI_Clinical_Right$P01BMI + OAI_Clinical_Right$Batch + OAI_Clinical_Right$Cohort  + OAI_Clinical_Right$P02RACE + as.factor(OAI_Clinical_Right$Progression)  )


d <- DGEList(Counts )
d <- calcNormFactors(d)


d <- estimateDisp(d, design)

fit <- glmQLFit(d, design, robust=TRUE)
results <- glmQLFTest(fit)
topTags(results)

out <- topTags(results, n=Inf)
top <- topTags(results,n = 50)

out1 <- out$table
top1 <- out1[!is.na(out1$FDR),]
top1 <- top1[top1$PValue < 0.1,]
Pvalue <- out1$PValue[match(rownames(Counts),rownames(out1))]
BH <- p.adjust(Pvalue, method = 'BH', n = 397)
FDR <- data.frame(BH = BH, names = rownames(Counts))

out1$BH <- FDR$BH[match(rownames(out1),FDR$names)]
out1$BH <- ifelse(!is.na(out1$BH),out1$PValue*397,NA)
out1$BH <- ifelse(out1$BH >1 , 1, out1$BH)
write.csv(out1, file = 'S:/PHS/Files/ilovele1/Bone and Joint/OAI/Prog vs No Prog.csv')

###CPM threshold PCA
sub_matrix <- Counts[match(rownames(top1),rownames(Counts)),]

tmp <- vst(as.matrix(sub_matrix),nsub = 100)
tmp.pca <- prcomp(t(tmp))
pca.plot <- autoplot(tmp.pca, data = OAI_Clinical, colour = 'Progression', label = F)
pca.plot


###Batch Adjusted

OAI_miRNA <- OAI_miRNA[,!OAI_Clinical$Batch %in% 'OAI_Run12_AA']
OAI_Clinical <- OAI_Clinical[!OAI_Clinical$Batch %in% 'OAI_Run12_AA',]

adjusted <- ComBat_seq(OAI_miRNA, batch=batch, group=NULL)


tmp <- vst(as.matrix(adjusted),nsub = 100)
tmp.pca <- prcomp(t(tmp))
pca.plot <- autoplot(tmp.pca, data = OAI_Clinical, colour = 'Batch', label = F)
pca.plot



CPM <- "cpm"(adjusted)
keep <- which(rowSums(CPM >= 10) >=2)
Counts <- OAI_miRNA[keep,]


adjusted <- ComBat_seq(Counts, batch=batch, group=NULL)


tmp <- vst(as.matrix(adjusted),nsub = 100)
tmp.pca <- prcomp(t(tmp))
pca.plot <- autoplot(tmp.pca, data = OAI_Clinical, colour = 'Batch', label = F)
pca.plot


design <- model.matrix(~OAI_Clinical$V00Age + OAI_Clinical$P02Sex + OAI_Clinical$P01BMI + OAI_Clinical$P02RACE + as.factor(OAI_Clinical$Progression) )


d <- DGEList(Counts )
d <- calcNormFactors(d)


d <- estimateDisp(d, design)

fit <- glmQLFit(d, design, robust=TRUE)
results <- glmQLFTest(fit)
topTags(results)

out <- topTags(results, n=Inf)
top <- topTags(results,n = 50)

out1 <- out$table
top1 <- out1[!is.na(out1$FDR),]
top1 <- top1[top1$PValue < 0.1,]


sub_matrix <- Counts[match(rownames(top1),rownames(Counts)),]
OAI_Clinical$Progression <- as.factor(OAI_Clinical$Progression)
tmp <- vst(as.matrix(sub_matrix),nsub = 100)
tmp.pca <- prcomp(t(tmp))
pca.plot <- autoplot(tmp.pca, data = OAI_Clinical, colour = 'Batch', label = F)
pca.plot



##### Sampling Non-Progress
sample <- sample(c(1:197),197)
counts_sample <- cbind(OAI_miRNA[,OAI_Clinical$Progression ==1],OAI_miRNA[,OAI_Clinical$Progression == 0][,sample %in% c(1:35)])
counts_sample[1:5,1:5]

OAI_Clinical_sample <- OAI_Clinical[match(colnames(counts_sample),OAI_Clinical$`Subject ID`),]
batch <- ifelse(OAI_Clinical_sample$Batch %in% 'OAI_Run1_AA' | OAI_Clinical_sample$Batch %in% 'OAI_Run2_AA',1,0)
adjusted <- ComBat_seq(counts_sample, batch=batch, group=NULL)


tmp <- vst(as.matrix(Counts),nsub = 100)
tmp.pca <- prcomp(t(tmp))
pca.plot <- autoplot(tmp.pca, data = OAI_Clinical, colour = 'Batch', label = F)
pca.plot



CPM <- "cpm"(adjusted)
keep <- which(rowSums(CPM >= 10) >=2)
Counts <- adjusted[keep,]


adjusted <- ComBat_seq(Counts, batch=batch, group=NULL)


tmp <- vst(as.matrix(adjusted),nsub = 100)
tmp.pca <- prcomp(t(tmp))
pca.plot <- autoplot(tmp.pca, data = OAI_Clinical, colour = 'Batch', label = F)
pca.plot


design <- model.matrix(~OAI_Clinical$V00Age + OAI_Clinical$P02Sex + OAI_Clinical$P01BMI + OAI_Clinical$P02RACE + as.factor(OAI_Clinical$Progression) )


d <- DGEList(Counts )
d <- calcNormFactors(d)


d <- estimateDisp(d, design)

fit <- glmQLFit(d, design, robust=TRUE)
results <- glmQLFTest(fit)
topTags(results)

out <- topTags(results, n=Inf)
top <- topTags(results,n = 50)

out1 <- out$table
top1 <- out1[!is.na(out1$FDR),]
top1 <- top1[top1$PValue < 0.1,]


sub_matrix <- Counts[match(rownames(top1),rownames(Counts)),]
OAI_Clinical$Progression <- as.factor(OAI_Clinical$Progression)
tmp <- vst(as.matrix(sub_matrix),nsub = 100)
tmp.pca <- prcomp(t(tmp))
pca.plot <- autoplot(tmp.pca, data = OAI_Clinical, colour = 'Batch', label = F)
pca.plot



Counts_Left <- Counts[,pca.plot$data$PC1 < 0]
Counts_Right <- Counts[,pca.plot$data$PC1 > 0]
OAI_Clinical_Left <- OAI_Clinical[pca.plot$data$PC1 < 0,]
OAI_Clinical_Right <- OAI_Clinical[pca.plot$data$PC1 > 0,]

###Differential Analysis Subset
CPM <- "cpm"(OAI_miRNA)
keep <- which(rowSums(CPM >= 10) >=2)
Counts <- OAI_miRNA[keep,]
design <- model.matrix(~OAI_Clinical_Right$V00Age + OAI_Clinical_Right$P02Sex + OAI_Clinical_Right$P01BMI + OAI_Clinical_Right$Cohort  + OAI_Clinical_Right$P02RACE + as.factor(OAI_Clinical_Right$Progression)  )


d <- DGEList(Counts_Right)
d <- calcNormFactors(d)


d <- estimateDisp(d, design)

fit <- glmQLFit(d, design, robust=TRUE)
results <- glmQLFTest(fit)
topTags(results)

out <- topTags(results, n=Inf)
top <- topTags(results,n = 50)

out1 <- out$table
top1 <- out1[!is.na(out1$FDR),]
top1 <- top1[top1$PValue < 0.1,]

write.csv(out1, file = 'S:/PHS/Files/ilovele1/Bone and Joint/OAI/Prog vs No Prog Subset_noBatch_Left.csv')

###CPM threshold PCA
sub_matrix <- Counts_Left[match(rownames(top1),rownames(Counts_Left)),]

tmp <- vst(as.matrix(sub_matrix),nsub = 10)
tmp.pca <- prcomp(t(tmp))
pca.plot <- autoplot(tmp.pca, data = OAI_Clinical_Left, colour = 'Progression', label = F)
pca.plot


###### Model Construction

top1 <- top1[top1$FDR < 0.1,]



samp <- sample(1:176, nrow(OAI_Clinical_Right), replace = F)




Counts_Right <- t(Counts_Right)
Counts_Right <- as.data.frame(Counts_Right)
top_miRNA <- top1
Counts_Right$label <- OAI_Clinical_Right$Progression
glmtable <- knntable <- svmtable <- treetable<- cubictable <-matrix(list(), 200, 1)
for(j in 1:176){

    CP3Test<-Counts_Right[samp %in% j,]
    CP3Train<-Counts_Right[!samp %in% j,]



for(k in seq(10,106, by = 10)){
tmp1 <- Counts_Right[,match(rownames(top_miRNA)[1:k],colnames(Counts_Right))]
N1 <- colnames(tmp1)
train <- cbind(as.factor(CP3Train$label),CP3Train[,N1])
colnames(train)[1] <- 'y'
    default_glm_mod = train(
        form = y ~ .,
        data = train,
        trControl = trainControl(method = "cv", number = 5),
        method = "glm",
        family = "binomial"
    )

    predicted <- unlist(predict(default_glm_mod, newdata =  CP3Test, type = 'prob')[,1])
    if(j==1) {glmtable[[k]]<-cbind(j,CP3Test$label,predicted)
    } else {glmtable[[k]]<-rbind(glmtable[[k]],cbind(j,CP3Test$label,predicted))}




    #ROC <- roc(predictor=out1$`0`,
    #response=tmp$y,
    #levels=rev(levels(tmp$y)))

    #ROC$auc


    default_knn_mod = train(
        y ~ .,
        data = train,
        method = "knn",
        trControl = trainControl(method = "cv", number = 5)
    )

    predicted <- unlist(predict(default_knn_mod, newdata =  CP3Test, type = 'prob')[,1])

    if(j==1) {knntable[[k]]<-cbind(j,CP3Test$label,predicted)
    } else {knntable[[k]]<-rbind(knntable[[k]],cbind(j,CP3Test$label,predicted))}



    #CPTrain.rf<-randomForest(y ~ .,data=train,ntree=1000,importance=TRUE)
    #predicted<-predict(CPTrain.rf,CP3Test)

    #if(j==1) {treetable[[k]]<-cbind(j,CP3Test$label,attr(predicted,"probabilities")[,1])
    #} else {treetable[[k]]<-rbind(treetable[[k]],cbind(j,CP3Test$label,attr(predicted,"probabilities")[,1]))}



    model <- svm(y ~ ., data=train, kernel = 'linear', probability = T)
    svm.predicted <- predict(model, newdata = CP3Test, probability = T)
    if(j==1) {svmtable[[k]]<-cbind(j,CP3Test$label,attr(svm.predicted,"probabilities")[,1])
    }else {svmtable[[k]]<-rbind(svmtable[[k]],cbind(j,CP3Test$label,attr(svm.predicted,"probabilities")[,1]))}

    #sv.model <- svm(CP3Train$label~., data=CP3Train[,N1], kernel = 'polynomial', probability = T)
    #cubic.predicted <- predict(sv.model, CP3Test[,N1], probability = T)
    #if(j==1) {cubictable[[k]]<-cbind(j,CP3Test$label,attr(cubic.predicted,"probabilities")[,1])
    #} else {cubictable[[k]]<-rbind(cubictable[[k]],cbind(j,CP3Test$labelattr(cubic.predicted,"probabilities")[,1]))}


}

}

tables <- c('knntable','svmtable','glmtable')

for (j in seq(10,106,by=10)){


    N200pred<- svmtable[[j]]
    N200pred<-as.data.frame(N200pred)
    #predcount<-table(Sample=N200pred$Sample,prediction=N200pred$predicted)
    #predcount<-as.data.frame(predcount)
    #colnames(tp)<-c("Sample","label","subcounts","prediction","predcounts")
    #tp$recprob<-ifelse(tp$predcounts!=0,tp$predcounts/tp$subcounts,0)
    #prob.rec<-tp[tp$prediction==1,]
    colnames(N200pred)[c(2,3)] <- c('V2','predicted')

    pdf(paste0("S:/PHS/Files/ilovele1/Bone and Joint/OAI/CV/svmtable",j,".pdf"))
    prob.rec.roc<-roc(response = as.factor(N200pred$V2),predictor = N200pred$predicted,plot=TRUE,legacy.axes=TRUE,print.auc=T)
    print(prob.rec.roc$auc)
    dev.off()

}


